{"version":3,"file":"static/webpack/static/development/pages/index.js.d9fee0117ea37070fb41.hot-update.js","sources":["webpack:///./components/Dashboard/index.js"],"sourcesContent":["import React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport { SizeMe } from 'react-sizeme'\n// import GridLayout from 'react-grid-layout';\nimport RGL, { WidthProvider } from \"react-grid-layout\";\nimport _ from 'lodash';\n\nimport Tile from '../Tile';\n\nconst ReactGridLayout = WidthProvider(RGL);\n\nimport './styles.css';\n\n\nclass Dashboard extends Component {\n  static defaultProps = {\n      className: \"layout\",\n      items: 4,\n      y: 3,\n      onLayoutChange: function() {},\n      cols: 12,\n      graphs: ['bar', 'line', 'area']\n    };\n\n    constructor(props) {\n      super(props);\n\n      const layout = this.generateLayout();\n      this.state = { layout };\n    }\n\n    generateDOM() {\n      const { items,  graphs } = this.props;\n      return _.map(_.range(this.props.items), function(i) {\n        return (\n          <div key={i}>\n            <Tile i={i} type={graphs[i] || 'none'}/>\n          </div>\n        );\n      });\n    }\n\n    generateLayout() {\n      const p = this.props;\n      return _.map(new Array(p.items), function(item, i) {\n        const y = _.result(p, \"y\") || Math.ceil(Math.random() * 4) + 1;\n        return {\n          x: (i * 6) % 12,\n          y: Math.floor(i / 6) * y,\n          w: 5,\n          h: y,\n          i: i.toString()\n        };\n      });\n    }\n\n    onLayoutChange(layout) {\n      this.props.onLayoutChange(layout);\n    }\n\n    render() {\n      return (\n        <SizeMe>\n        {({ size }) => {\n          return (\n            <ReactGridLayout\n              layout={this.state.layout}\n              onLayoutChange={this.onLayoutChange}\n              {...this.props}\n            >\n              {this.generateDOM()}\n            </ReactGridLayout>\n          );\n        }}\n        </SizeMe>\n      );\n    }\n}\n\nfunction mapStateToProps (state) {\n  const { lastUpdate, light } = state\n  return { lastUpdate, light };\n}\n\nexport default connect(mapStateToProps)(Dashboard);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;;;;;AAUA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAJA;AAKA;AACA;;;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;;;AAEA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAGA;;;;AA9DA;AACA;AADA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AA+DA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;;A","sourceRoot":""}